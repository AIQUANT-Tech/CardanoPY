// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: HaskellLexer.flex

package org.intellij.sdk.language.grammars;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.intellij.lexer.*;
import static org.intellij.sdk.language.psi.HaskellTypes.*;

public class HaskellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NCOMMENT = 2;
  public static final int NHADDOCK = 4;
  public static final int QQ = 6;
  public static final int OPTIONS_GHC = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\2\u0100\1\u0200\34\u0100\1\u0300\1\u0400\1\u0500\3\u0100"+
    "\1\u0600\261\u0100\10\u0700\364\u0100\1\u0800\1\u0900\u0f2a\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\5\0\1\1\3\0\1\2\1\3\2\1\1\4\22\0"+
    "\1\5\1\6\1\7\1\10\2\6\1\11\1\12\1\13"+
    "\1\14\1\6\1\15\1\16\1\17\1\20\1\6\1\21"+
    "\4\22\3\23\2\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\44\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\45\1\61\1\62\1\45\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\2\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\102\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\102\1\120\1\121\1\122\1\123\6\0"+
    "\1\124\32\0\1\1\13\0\1\125\10\0\1\125\u01ba\0"+
    "\41\126\31\45\7\126\31\102\66\126\50\0\2\124\106\0"+
    "\12\127\6\0\12\127\170\0\1\130\22\0\1\130\4\0"+
    "\1\130\2\0\1\130\6\0\1\130\153\0\1\131\1\126"+
    "\1\132\77\126\1\133\55\126\1\134\27\135\1\136\36\135"+
    "\1\137\216\135\1\6\71\135\5\0\1\140\372\0\u0100\124"+
    "\126\0\1\125\u0110\0\1\125\230\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2560];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\2\1\4\1\5\1\4"+
    "\1\6\1\7\1\10\1\4\1\11\1\4\1\12\2\13"+
    "\1\14\1\15\1\4\1\16\1\4\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\14\26\1\27\1\30\1\31"+
    "\1\32\1\13\1\33\1\34\1\35\1\36\1\37\6\40"+
    "\1\41\1\42\1\40\2\43\1\44\1\43\1\45\1\46"+
    "\2\0\1\47\2\0\5\26\1\0\1\14\3\0\1\50"+
    "\3\0\1\14\1\37\1\20\3\0\1\51\3\0\2\26"+
    "\1\0\5\26\1\52\2\26\1\53\1\26\1\54\3\26"+
    "\1\55\3\26\1\56\1\0\1\57\1\60\1\61\1\62"+
    "\3\0\1\41\1\0\1\63\1\47\1\43\1\0\2\43"+
    "\1\64\23\0\4\26\1\65\2\26\1\66\17\0\3\50"+
    "\1\0\1\64\1\67\1\70\1\0\1\26\1\71\12\26"+
    "\1\72\5\26\1\0\1\73\1\74\16\43\1\75\1\66"+
    "\17\43\20\0\5\26\1\65\2\26\15\0\2\50\1\76"+
    "\1\0\1\77\1\26\1\100\2\26\1\101\6\26\1\102"+
    "\1\103\1\26\27\43\7\0\2\26\1\65\1\26\2\0"+
    "\1\104\4\26\1\105\3\26\1\0\1\106\3\0\1\26"+
    "\4\0\3\26\1\107\1\110\1\111\1\26\1\112\1\26"+
    "\3\0\1\26\1\76\2\0\1\113\3\26\1\114\3\0"+
    "\1\65\2\76\2\0\1\115\1\0\1\116\3\0\1\65"+
    "\7\0\1\65\7\0\1\117\4\0\1\120\1\0\1\117"+
    "\1\0\1\50\6\0\1\121\1\0\1\122\1\123\2\0"+
    "\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\141\0\302\0\u0123\0\u0184\0\u01e5\0\u0246\0\u01e5"+
    "\0\u02a7\0\u0308\0\u0369\0\u03ca\0\u042b\0\u048c\0\u01e5\0\u01e5"+
    "\0\u04ed\0\u01e5\0\u054e\0\u01e5\0\u05af\0\u0610\0\u0671\0\u01e5"+
    "\0\u06d2\0\u0733\0\u0794\0\u0369\0\u07f5\0\u0856\0\u08b7\0\u01e5"+
    "\0\u0918\0\u01e5\0\u0979\0\u09da\0\u0a3b\0\u0a9c\0\u0afd\0\u0b5e"+
    "\0\u0bbf\0\u0c20\0\u0c81\0\u0ce2\0\u0d43\0\u0da4\0\u0e05\0\u0369"+
    "\0\u01e5\0\u0369\0\u0e66\0\u0369\0\u0369\0\u0369\0\u01e5\0\u0369"+
    "\0\u01e5\0\u0ec7\0\u0f28\0\u0f89\0\u0fea\0\u104b\0\u10ac\0\u01e5"+
    "\0\u110d\0\u116e\0\u11cf\0\u1230\0\u1291\0\u116e\0\u01e5\0\u12f2"+
    "\0\u03ca\0\u01e5\0\u1353\0\u13b4\0\u1415\0\u1476\0\u14d7\0\u1538"+
    "\0\u1599\0\u15fa\0\u165b\0\u16bc\0\u171d\0\u177e\0\u17df\0\u1840"+
    "\0\u18a1\0\u1902\0\u1963\0\u1963\0\u01e5\0\u0856\0\u19c4\0\u1a25"+
    "\0\u19c4\0\u1a86\0\u1ae7\0\u1b48\0\u1b48\0\u1ba9\0\u1c0a\0\u0918"+
    "\0\u1c6b\0\u1ccc\0\u1d2d\0\u1d8e\0\u0979\0\u1def\0\u1e50\0\u0979"+
    "\0\u1eb1\0\u1f12\0\u1f73\0\u1fd4\0\u2035\0\u0979\0\u2096\0\u20f7"+
    "\0\u2158\0\u21b9\0\u0e66\0\u01e5\0\u01e5\0\u01e5\0\u01e5\0\u10ac"+
    "\0\u221a\0\u227b\0\u221a\0\u22dc\0\u01e5\0\u116e\0\u233d\0\u239e"+
    "\0\u23ff\0\u2460\0\u24c1\0\u2522\0\u2583\0\u25e4\0\u2645\0\u26a6"+
    "\0\u2707\0\u2768\0\u27c9\0\u282a\0\u288b\0\u28ec\0\u294d\0\u29ae"+
    "\0\u2a0f\0\u2a70\0\u2ad1\0\u2b32\0\u2b93\0\u2bf4\0\u2c55\0\u2cb6"+
    "\0\u2d17\0\u2d78\0\u2dd9\0\u2e3a\0\u2e9b\0\u01e5\0\u2efc\0\u2f5d"+
    "\0\u2fbe\0\u301f\0\u3080\0\u30e1\0\u3142\0\u31a3\0\u3204\0\u3265"+
    "\0\u32c6\0\u3327\0\u3388\0\u33e9\0\u344a\0\u34ab\0\u350c\0\u356d"+
    "\0\u35ce\0\u35ce\0\u18a1\0\u1902\0\u362f\0\u3690\0\u01e5\0\u36f1"+
    "\0\u3752\0\u37b3\0\u3814\0\u3875\0\u38d6\0\u3937\0\u3998\0\u39f9"+
    "\0\u3a5a\0\u0979\0\u3abb\0\u3b1c\0\u3b7d\0\u3bde\0\u3c3f\0\u3ca0"+
    "\0\u01e5\0\u01e5\0\u3d01\0\u3d62\0\u3dc3\0\u3e24\0\u3e85\0\u3ee6"+
    "\0\u3f47\0\u3fa8\0\u4009\0\u406a\0\u40cb\0\u412c\0\u418d\0\u41ee"+
    "\0\u01e5\0\u116e\0\u424f\0\u42b0\0\u4311\0\u4372\0\u43d3\0\u4434"+
    "\0\u4495\0\u44f6\0\u4557\0\u45b8\0\u4619\0\u467a\0\u46db\0\u473c"+
    "\0\u479d\0\u47fe\0\u485f\0\u48c0\0\u4921\0\u4982\0\u49e3\0\u4a44"+
    "\0\u4aa5\0\u4b06\0\u4b67\0\u4bc8\0\u4c29\0\u4c8a\0\u4ceb\0\u4d4c"+
    "\0\u4dad\0\u4e0e\0\u4e6f\0\u4ed0\0\u4f31\0\u4f92\0\u4ff3\0\u5054"+
    "\0\u50b5\0\u5116\0\u5177\0\u51d8\0\u5239\0\u529a\0\u52fb\0\u535c"+
    "\0\u53bd\0\u541e\0\u547f\0\u54e0\0\u5541\0\u55a2\0\u5603\0\u5664"+
    "\0\u56c5\0\u5726\0\u0979\0\u5787\0\u0979\0\u57e8\0\u5849\0\u0979"+
    "\0\u58aa\0\u590b\0\u596c\0\u59cd\0\u5a2e\0\u5a8f\0\u0979\0\u5af0"+
    "\0\u5b51\0\u5bb2\0\u5c13\0\u5c74\0\u5cd5\0\u5d36\0\u5d97\0\u5df8"+
    "\0\u5e59\0\u5eba\0\u5f1b\0\u5f7c\0\u5fdd\0\u603e\0\u609f\0\u6100"+
    "\0\u6161\0\u61c2\0\u6223\0\u6284\0\u62e5\0\u6346\0\u63a7\0\u6408"+
    "\0\u6469\0\u64ca\0\u652b\0\u658c\0\u65ed\0\u664e\0\u66af\0\u6710"+
    "\0\u6771\0\u67d2\0\u6833\0\u6894\0\u68f5\0\u0979\0\u6956\0\u69b7"+
    "\0\u6a18\0\u6a79\0\u6ada\0\u6b3b\0\u6b9c\0\u6bfd\0\u6c5e\0\u0979"+
    "\0\u6cbf\0\u6d20\0\u6d81\0\u6de2\0\u6e43\0\u6ea4\0\u6f05\0\u6f66"+
    "\0\u6fc7\0\u7028\0\u7089\0\u0979\0\u0979\0\u0979\0\u70ea\0\u0979"+
    "\0\u714b\0\u71ac\0\u720d\0\u726e\0\u72cf\0\u7330\0\u7391\0\u73f2"+
    "\0\u0979\0\u7453\0\u74b4\0\u7515\0\u0979\0\u7576\0\u75d7\0\u7638"+
    "\0\u7699\0\u76fa\0\u775b\0\u77bc\0\u781d\0\u0979\0\u787e\0\u0979"+
    "\0\u78df\0\u7940\0\u79a1\0\u7a02\0\u7a63\0\u7ac4\0\u7b25\0\u7b86"+
    "\0\u7be7\0\u7c48\0\u7ca9\0\u7d0a\0\u7d6b\0\u7dcc\0\u7e2d\0\u7e8e"+
    "\0\u7eef\0\u7f50\0\u7fb1\0\u2dd9\0\u8012\0\u8073\0\u80d4\0\u8135"+
    "\0\u01e5\0\u8196\0\u01e5\0\u81f7\0\u01e5\0\u8258\0\u82b9\0\u831a"+
    "\0\u837b\0\u83dc\0\u843d\0\u01e5\0\u849e\0\u01e5\0\u01e5\0\u84ff"+
    "\0\u8560\0\u85c1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\13\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\3\26\1\27\1\30\1\31\1\32\1\13\1\33"+
    "\1\34\27\35\1\36\1\37\1\40\1\13\1\41\1\42"+
    "\2\43\1\44\1\45\1\46\1\47\2\43\1\50\1\43"+
    "\1\51\1\52\1\53\1\54\3\43\1\55\2\43\1\56"+
    "\2\43\1\57\1\60\1\61\1\62\1\6\1\43\1\6"+
    "\1\63\1\35\1\64\1\65\1\66\1\67\2\13\1\70"+
    "\1\13\4\71\1\72\12\71\1\73\100\71\1\74\3\71"+
    "\1\0\20\71\1\72\12\71\1\75\100\71\1\76\3\71"+
    "\1\0\20\71\1\72\56\71\1\77\1\71\1\100\33\71"+
    "\1\101\2\71\1\0\14\71\1\0\2\7\1\10\1\11"+
    "\1\7\1\102\1\103\1\104\1\102\1\105\3\102\1\106"+
    "\1\107\104\102\2\0\1\102\2\0\7\102\143\0\2\7"+
    "\1\0\2\7\134\0\2\7\1\10\2\7\134\0\2\7"+
    "\1\0\2\7\12\0\1\110\126\0\1\13\1\0\2\13"+
    "\3\0\1\13\1\0\2\13\4\0\1\13\1\0\5\13"+
    "\30\0\1\13\1\0\1\13\32\0\1\13\1\0\1\13"+
    "\11\0\4\13\3\111\1\112\3\111\1\112\54\111\1\113"+
    "\54\111\1\0\2\114\1\0\2\114\1\13\1\0\2\13"+
    "\3\0\1\13\1\0\2\13\4\0\1\13\1\0\5\13"+
    "\30\0\1\13\1\0\1\13\1\115\1\0\3\115\1\116"+
    "\1\117\3\115\1\120\11\115\1\121\4\115\1\0\1\13"+
    "\1\0\1\13\1\0\1\115\7\0\4\13\3\122\1\0"+
    "\6\122\1\0\12\122\1\123\36\122\1\124\54\122\5\0"+
    "\1\125\1\13\1\0\2\13\3\0\1\13\1\0\2\13"+
    "\4\26\1\13\1\0\5\13\30\0\1\13\1\0\1\13"+
    "\1\126\31\0\1\13\1\0\1\13\3\0\1\63\5\0"+
    "\4\13\5\0\1\125\1\13\1\0\2\13\3\0\1\13"+
    "\1\0\1\127\1\13\4\26\1\13\1\0\2\13\1\65"+
    "\2\13\30\0\1\13\1\0\1\13\1\126\31\0\1\13"+
    "\1\0\1\13\3\0\1\63\5\0\4\13\20\0\1\110"+
    "\4\26\13\0\1\130\11\0\1\131\6\0\1\132\5\0"+
    "\1\126\5\0\1\130\10\0\1\131\7\0\1\132\10\0"+
    "\1\63\31\0\1\110\4\26\13\0\1\130\26\0\1\126"+
    "\5\0\1\130\31\0\1\63\17\0\1\133\1\0\2\133"+
    "\3\0\1\133\1\0\2\133\4\0\1\134\1\0\5\133"+
    "\30\0\1\133\1\0\1\133\32\0\1\133\1\0\1\133"+
    "\11\0\4\133\6\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\0\1\64\1\13\4\0\1\13\1\0\5\13\30\0"+
    "\1\13\1\0\1\13\32\0\1\13\1\0\1\13\11\0"+
    "\4\13\6\0\1\13\1\0\2\13\3\0\1\13\1\0"+
    "\2\13\4\0\1\13\1\0\2\13\1\66\2\13\30\0"+
    "\1\13\1\0\1\13\32\0\1\13\1\0\1\13\11\0"+
    "\4\13\6\0\1\13\1\0\2\13\3\0\1\13\1\0"+
    "\2\13\4\0\1\13\1\0\5\13\30\0\1\13\1\0"+
    "\1\13\1\115\1\0\27\115\1\0\1\13\1\0\1\13"+
    "\1\0\1\115\7\0\4\13\10\0\1\135\1\0\1\35"+
    "\6\0\4\35\7\0\27\35\4\0\1\35\1\0\27\35"+
    "\5\0\1\35\1\0\2\35\11\0\2\136\1\0\2\136"+
    "\1\137\1\0\2\137\3\0\1\137\1\0\1\137\1\136"+
    "\6\0\5\137\27\140\1\0\1\137\1\0\1\137\1\140"+
    "\1\0\27\140\1\0\1\141\1\0\1\137\1\0\1\140"+
    "\2\0\1\140\3\142\1\0\4\137\6\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\0\2\13\4\0\1\13\1\0"+
    "\5\13\30\0\1\13\1\0\1\13\3\0\1\143\26\0"+
    "\1\13\1\0\1\13\11\0\4\13\2\0\1\144\2\0"+
    "\1\144\2\0\1\145\1\0\1\43\6\0\4\146\1\147"+
    "\6\0\27\43\4\0\1\150\1\0\27\43\5\0\1\43"+
    "\1\0\2\43\12\0\1\144\2\0\1\144\2\0\1\145"+
    "\1\0\1\43\6\0\4\43\1\147\6\0\27\43\4\0"+
    "\1\43\1\0\27\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\1\151"+
    "\11\43\1\152\14\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\1\153"+
    "\3\43\1\154\10\43\1\155\11\43\5\0\1\43\1\0"+
    "\2\43\12\0\1\144\2\0\1\144\2\0\1\145\1\0"+
    "\1\43\6\0\4\43\1\147\6\0\27\43\4\0\1\43"+
    "\1\0\12\43\1\156\14\43\5\0\1\43\1\0\2\43"+
    "\12\0\1\144\2\0\1\144\2\0\1\145\1\0\1\43"+
    "\6\0\4\43\1\147\6\0\27\43\4\0\1\43\1\0"+
    "\15\43\1\157\11\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\5\43"+
    "\1\160\5\43\1\161\1\162\12\43\5\0\1\43\1\0"+
    "\2\43\12\0\1\144\2\0\1\144\2\0\1\145\1\0"+
    "\1\43\6\0\4\43\1\147\6\0\27\43\4\0\1\43"+
    "\1\0\4\43\1\163\22\43\5\0\1\43\1\0\2\43"+
    "\12\0\1\144\2\0\1\144\2\0\1\145\1\0\1\43"+
    "\6\0\4\43\1\147\6\0\27\43\4\0\1\43\1\0"+
    "\15\43\1\164\11\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\4\43"+
    "\1\165\22\43\5\0\1\43\1\0\2\43\12\0\1\144"+
    "\2\0\1\144\2\0\1\145\1\0\1\43\6\0\4\43"+
    "\1\147\6\0\27\43\4\0\1\43\1\0\5\43\1\166"+
    "\21\43\5\0\1\43\1\0\2\43\12\0\1\144\2\0"+
    "\1\144\2\0\1\145\1\0\1\43\6\0\4\43\1\147"+
    "\6\0\27\43\4\0\1\43\1\0\7\43\1\167\16\43"+
    "\1\170\5\0\1\43\1\0\2\43\12\0\1\144\2\0"+
    "\1\144\2\0\1\145\1\0\1\43\6\0\4\43\1\147"+
    "\6\0\27\43\4\0\1\43\1\0\7\43\1\171\17\43"+
    "\5\0\1\43\1\0\2\43\27\0\1\172\142\0\4\63"+
    "\42\0\1\173\37\0\1\63\14\0\1\71\257\0\1\174"+
    "\35\0\1\175\243\0\1\176\35\0\1\177\122\0\2\200"+
    "\1\0\2\200\1\201\1\0\2\201\3\0\1\201\1\0"+
    "\1\201\1\200\6\0\5\201\27\202\1\0\1\201\1\0"+
    "\1\201\1\202\1\0\27\202\1\0\1\203\1\0\1\201"+
    "\1\0\1\202\2\0\1\202\3\204\1\0\4\201\65\0"+
    "\1\205\61\0\2\102\1\0\6\102\1\0\104\102\2\0"+
    "\1\102\2\0\7\102\1\0\3\111\1\112\2\111\1\103"+
    "\1\206\1\111\6\103\1\111\44\103\1\207\37\103\2\111"+
    "\1\103\2\111\7\103\1\111\17\0\1\210\121\0\3\122"+
    "\1\0\2\122\2\211\1\122\1\211\1\102\4\211\1\122"+
    "\44\211\1\212\37\211\2\122\1\211\2\122\7\211\1\122"+
    "\21\0\4\213\42\0\1\110\52\0\5\214\1\0\1\111"+
    "\1\0\2\111\6\0\4\111\7\0\1\215\1\216\1\217"+
    "\1\220\1\221\1\222\1\223\1\224\3\0\1\225\1\0"+
    "\1\226\2\0\1\223\1\227\1\0\1\223\1\224\3\0"+
    "\1\111\1\0\1\230\2\0\2\111\3\0\1\111\6\0"+
    "\1\111\1\231\1\0\1\111\1\0\1\111\1\0\1\111"+
    "\1\0\1\232\10\0\1\111\12\0\2\114\1\0\2\114"+
    "\66\0\1\233\1\234\3\0\1\235\11\0\1\236\27\0"+
    "\1\144\2\0\1\144\4\0\1\115\6\0\4\115\1\147"+
    "\6\0\27\115\4\0\1\115\1\0\27\115\5\0\1\115"+
    "\1\0\2\115\12\0\1\144\2\0\1\144\4\0\1\115"+
    "\6\0\4\115\1\147\6\0\27\115\4\0\1\115\1\0"+
    "\4\115\1\237\22\115\5\0\1\115\1\0\2\115\12\0"+
    "\1\144\2\0\1\144\4\0\1\115\6\0\4\115\1\147"+
    "\6\0\27\115\4\0\1\115\1\0\12\115\1\240\1\115"+
    "\1\241\2\115\1\242\7\115\5\0\1\115\1\0\2\115"+
    "\12\0\1\144\2\0\1\144\4\0\1\115\6\0\4\115"+
    "\1\147\6\0\27\115\4\0\1\115\1\0\5\115\1\243"+
    "\6\115\1\244\12\115\5\0\1\115\1\0\2\115\12\0"+
    "\1\144\2\0\1\144\4\0\1\115\6\0\4\115\1\147"+
    "\6\0\27\115\4\0\1\115\1\0\14\115\1\245\12\115"+
    "\5\0\1\115\1\0\2\115\22\0\1\246\134\0\1\133"+
    "\1\0\2\133\1\246\2\0\1\133\1\0\2\133\4\0"+
    "\1\133\1\0\5\133\30\0\1\133\1\0\1\133\32\0"+
    "\1\133\1\0\1\133\11\0\4\133\7\0\1\122\1\0"+
    "\2\122\6\0\4\247\7\0\1\250\1\251\1\252\1\253"+
    "\1\254\1\255\1\256\1\257\3\0\1\260\1\0\1\261"+
    "\2\0\1\256\1\262\1\0\1\256\1\257\3\0\1\122"+
    "\1\0\1\263\2\0\2\122\3\0\1\122\6\0\1\122"+
    "\1\264\1\0\1\122\1\0\1\122\1\0\1\122\1\0"+
    "\1\265\10\0\1\247\31\0\1\110\141\0\4\26\42\0"+
    "\1\126\37\0\1\63\11\0\1\266\2\267\1\0\1\270"+
    "\1\267\1\13\1\266\2\13\3\266\1\13\2\266\1\13"+
    "\6\266\5\13\105\266\15\0\1\271\1\0\1\271\1\0"+
    "\4\272\135\0\3\273\43\0\1\131\72\0\4\274\7\0"+
    "\6\274\25\0\1\132\1\0\6\274\50\0\1\133\1\0"+
    "\2\133\3\0\1\133\1\0\2\133\4\0\1\133\1\0"+
    "\5\133\30\0\1\133\1\0\1\133\32\0\1\133\1\0"+
    "\1\133\11\0\4\133\1\0\2\136\1\0\2\136\1\137"+
    "\1\0\2\137\3\0\1\137\1\0\2\137\4\0\1\137"+
    "\1\0\5\137\27\140\1\0\1\137\1\0\1\137\1\140"+
    "\1\0\27\140\1\0\1\141\1\0\1\137\1\0\1\140"+
    "\2\0\1\140\3\142\1\0\4\137\1\0\2\136\1\0"+
    "\2\136\1\137\1\0\2\137\1\140\2\0\1\137\1\0"+
    "\1\137\1\136\4\140\2\0\5\137\27\140\1\0\1\137"+
    "\1\0\1\137\1\140\1\0\27\140\1\0\1\141\1\0"+
    "\1\137\1\0\1\140\1\0\2\140\3\142\1\0\4\137"+
    "\6\0\1\137\1\0\2\137\3\0\1\137\1\0\2\137"+
    "\4\0\1\137\1\0\5\137\30\0\1\137\1\0\1\137"+
    "\32\0\1\137\1\0\1\137\11\0\4\137\75\0\1\275"+
    "\45\0\1\144\2\0\1\144\17\0\1\147\115\0\1\144"+
    "\2\0\1\144\2\0\1\145\1\0\1\43\5\0\1\110"+
    "\4\146\1\147\6\0\4\43\1\276\22\43\4\0\1\150"+
    "\1\0\4\43\1\276\22\43\5\0\1\43\1\0\2\43"+
    "\35\0\1\277\115\0\1\144\2\0\1\144\2\0\1\145"+
    "\1\0\1\43\6\0\4\43\1\147\6\0\27\43\4\0"+
    "\1\43\1\0\20\43\1\300\6\43\5\0\1\43\1\0"+
    "\2\43\12\0\1\144\2\0\1\144\2\0\1\145\1\0"+
    "\1\43\6\0\4\43\1\147\6\0\27\43\4\0\1\43"+
    "\1\0\1\301\26\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\21\43"+
    "\1\302\5\43\5\0\1\43\1\0\2\43\12\0\1\144"+
    "\2\0\1\144\2\0\1\145\1\0\1\43\6\0\4\43"+
    "\1\147\6\0\27\43\4\0\1\43\1\0\5\43\1\303"+
    "\11\43\1\304\7\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\20\43"+
    "\1\305\6\43\5\0\1\43\1\0\2\43\12\0\1\144"+
    "\2\0\1\144\2\0\1\145\1\0\1\43\6\0\4\43"+
    "\1\147\6\0\27\43\4\0\1\43\1\0\17\43\1\306"+
    "\7\43\5\0\1\43\1\0\2\43\12\0\1\144\2\0"+
    "\1\144\2\0\1\145\1\0\1\43\6\0\4\43\1\147"+
    "\6\0\27\43\4\0\1\43\1\0\16\43\1\307\10\43"+
    "\5\0\1\43\1\0\2\43\12\0\1\144\2\0\1\144"+
    "\2\0\1\145\1\0\1\43\6\0\4\43\1\147\6\0"+
    "\27\43\4\0\1\43\1\0\5\43\1\310\12\43\1\311"+
    "\6\43\5\0\1\43\1\0\2\43\12\0\1\144\2\0"+
    "\1\144\2\0\1\145\1\0\1\43\6\0\4\43\1\147"+
    "\6\0\27\43\4\0\1\43\1\0\21\43\1\312\5\43"+
    "\5\0\1\43\1\0\2\43\12\0\1\144\2\0\1\144"+
    "\2\0\1\145\1\0\1\43\6\0\4\43\1\147\6\0"+
    "\27\43\4\0\1\43\1\0\3\43\1\313\23\43\5\0"+
    "\1\43\1\0\2\43\12\0\1\144\2\0\1\144\2\0"+
    "\1\145\1\0\1\43\6\0\4\43\1\147\6\0\27\43"+
    "\4\0\1\43\1\0\24\43\1\314\2\43\5\0\1\43"+
    "\1\0\2\43\12\0\1\144\2\0\1\144\2\0\1\145"+
    "\1\0\1\43\6\0\4\43\1\147\6\0\27\43\4\0"+
    "\1\43\1\0\4\43\1\315\22\43\5\0\1\43\1\0"+
    "\2\43\12\0\1\144\2\0\1\144\2\0\1\145\1\0"+
    "\1\43\6\0\4\43\1\147\6\0\27\43\4\0\1\43"+
    "\1\0\16\43\1\316\10\43\5\0\1\43\1\0\2\43"+
    "\12\0\1\144\2\0\1\144\2\0\1\145\1\0\1\43"+
    "\6\0\4\43\1\147\6\0\27\43\4\0\1\43\1\0"+
    "\4\43\1\317\22\43\5\0\1\43\1\0\2\43\11\0"+
    "\2\320\1\0\2\320\2\0\1\321\110\0\1\322\20\0"+
    "\2\200\1\0\2\200\1\201\1\0\2\201\3\0\1\201"+
    "\1\0\2\201\4\0\1\201\1\0\5\201\27\202\1\0"+
    "\1\201\1\0\1\201\1\202\1\0\27\202\1\0\1\203"+
    "\1\0\1\201\1\0\1\202\2\0\1\202\3\204\1\0"+
    "\4\201\1\0\2\200\1\0\2\200\1\201\1\0\2\201"+
    "\1\202\2\0\1\201\1\0\1\201\1\200\4\202\2\0"+
    "\5\201\27\202\1\0\1\201\1\0\1\201\1\202\1\0"+
    "\27\202\1\0\1\203\1\0\1\201\1\0\1\202\1\0"+
    "\2\202\3\204\1\0\4\201\6\0\1\201\1\0\2\201"+
    "\3\0\1\201\1\0\2\201\4\0\1\201\1\0\5\201"+
    "\30\0\1\201\1\0\1\201\32\0\1\201\1\0\1\201"+
    "\11\0\4\201\1\0\5\214\1\102\1\103\1\0\2\103"+
    "\4\102\1\0\1\102\4\103\7\102\1\323\1\324\1\325"+
    "\1\326\1\327\1\330\1\331\1\332\3\102\1\333\1\102"+
    "\1\334\2\102\1\331\1\335\1\102\1\331\1\332\3\102"+
    "\1\103\1\102\1\336\2\102\2\103\3\102\1\103\6\102"+
    "\1\103\1\337\1\102\1\103\1\102\1\103\1\102\1\103"+
    "\1\102\1\340\5\102\2\0\1\102\1\111\1\0\7\102"+
    "\123\0\1\341\24\0\2\102\1\0\1\102\1\342\4\102"+
    "\1\0\104\102\2\0\1\102\2\0\7\102\7\0\1\102"+
    "\1\211\1\0\2\211\4\102\1\0\1\102\4\343\7\102"+
    "\1\344\1\345\1\346\1\347\1\350\1\351\1\352\1\353"+
    "\3\102\1\354\1\102\1\355\2\102\1\352\1\356\1\102"+
    "\1\352\1\353\3\102\1\211\1\102\1\357\2\102\2\211"+
    "\3\102\1\211\6\102\1\211\1\360\1\102\1\211\1\102"+
    "\1\211\1\102\1\211\1\102\1\361\5\102\2\0\1\102"+
    "\1\247\1\0\7\102\22\0\4\213\13\0\1\130\26\0"+
    "\1\110\5\0\1\130\44\0\5\214\56\0\1\111\112\0"+
    "\1\362\142\0\1\363\14\0\1\111\117\0\1\364\17\0"+
    "\1\111\122\0\1\365\1\0\1\363\6\0\1\366\141\0"+
    "\1\111\1\367\1\224\2\0\1\370\1\371\123\0\1\111"+
    "\13\0\1\111\140\0\1\111\141\0\1\111\123\0\1\111"+
    "\133\0\1\362\22\0\1\363\125\0\1\111\5\0\1\111"+
    "\3\0\1\372\1\373\2\0\1\364\111\0\35\111\40\0"+
    "\1\111\31\0\3\111\136\0\4\111\7\0\6\111\27\0"+
    "\6\111\137\0\1\374\146\0\1\375\1\0\1\376\2\0"+
    "\1\377\126\0\1\243\6\0\1\u0100\140\0\1\u0101\35\0"+
    "\1\144\2\0\1\144\4\0\1\115\6\0\4\115\1\147"+
    "\6\0\27\115\4\0\1\115\1\0\5\115\1\u0102\21\115"+
    "\5\0\1\115\1\0\2\115\12\0\1\144\2\0\1\144"+
    "\4\0\1\115\6\0\4\115\1\147\6\0\27\115\4\0"+
    "\1\115\1\0\10\115\1\u0103\7\115\1\u0104\6\115\5\0"+
    "\1\115\1\0\2\115\12\0\1\144\2\0\1\144\4\0"+
    "\1\115\6\0\4\115\1\147\6\0\27\115\4\0\1\115"+
    "\1\0\3\115\1\u0105\23\115\5\0\1\115\1\0\2\115"+
    "\12\0\1\144\2\0\1\144\4\0\1\115\6\0\4\115"+
    "\1\147\6\0\27\115\4\0\1\115\1\0\17\115\1\u0106"+
    "\7\115\5\0\1\115\1\0\2\115\10\0\3\243\2\0"+
    "\57\243\1\u0107\54\243\2\0\1\144\2\0\1\144\4\0"+
    "\1\115\6\0\4\115\1\147\6\0\27\115\4\0\1\115"+
    "\1\0\2\115\1\u0108\24\115\5\0\1\115\1\0\2\115"+
    "\12\0\1\144\2\0\1\144\4\0\1\115\6\0\4\115"+
    "\1\147\6\0\27\115\4\0\1\115\1\0\3\115\1\u0109"+
    "\23\115\5\0\1\115\1\0\2\115\22\0\1\246\6\0"+
    "\4\247\102\0\1\247\47\0\1\u010a\142\0\1\u010b\14\0"+
    "\1\122\117\0\1\u010c\17\0\1\122\122\0\1\u010d\1\0"+
    "\1\u010b\6\0\1\u010e\141\0\1\122\1\u010f\1\257\2\0"+
    "\1\u0110\1\u0111\123\0\1\122\13\0\1\122\140\0\1\122"+
    "\141\0\1\122\123\0\1\122\133\0\1\u010a\22\0\1\u010b"+
    "\125\0\1\122\5\0\1\u0112\3\0\1\u0113\1\u0114\2\0"+
    "\1\u010c\111\0\35\122\40\0\1\122\31\0\3\u0115\136\0"+
    "\4\u0116\7\0\6\u0116\27\0\6\u0116\42\0\3\266\2\0"+
    "\135\266\2\u0117\1\0\1\u0118\1\u0117\60\266\1\u0119\32\266"+
    "\1\u0119\17\266\1\0\2\u0118\1\0\2\u0118\60\0\1\u0119"+
    "\32\0\1\u0119\40\0\4\272\213\0\1\u011a\43\0\1\144"+
    "\2\0\1\144\2\0\1\145\1\0\1\43\2\0\1\271"+
    "\1\0\1\271\1\0\4\43\1\147\6\0\27\43\4\0"+
    "\1\43\1\0\27\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\4\43"+
    "\1\u011b\22\43\5\0\1\43\1\0\2\43\12\0\1\144"+
    "\2\0\1\144\2\0\1\145\1\0\1\43\6\0\4\43"+
    "\1\147\6\0\27\43\4\0\1\43\1\0\20\43\1\u011c"+
    "\6\43\5\0\1\43\1\0\2\43\12\0\1\144\2\0"+
    "\1\144\2\0\1\145\1\0\1\43\6\0\4\43\1\147"+
    "\6\0\27\43\4\0\1\43\1\0\1\u011d\26\43\5\0"+
    "\1\43\1\0\2\43\12\0\1\144\2\0\1\144\2\0"+
    "\1\145\1\0\1\43\6\0\4\43\1\147\6\0\27\43"+
    "\4\0\1\43\1\0\1\u011e\26\43\5\0\1\43\1\0"+
    "\2\43\12\0\1\144\2\0\1\144\2\0\1\145\1\0"+
    "\1\43\6\0\4\43\1\147\6\0\27\43\4\0\1\43"+
    "\1\0\10\43\1\u011f\16\43\5\0\1\43\1\0\2\43"+
    "\12\0\1\144\2\0\1\144\2\0\1\145\1\0\1\43"+
    "\6\0\4\43\1\147\6\0\27\43\4\0\1\43\1\0"+
    "\4\43\1\u0120\22\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\4\43"+
    "\1\u0121\22\43\5\0\1\43\1\0\2\43\12\0\1\144"+
    "\2\0\1\144\2\0\1\145\1\0\1\43\6\0\4\43"+
    "\1\147\6\0\27\43\4\0\1\43\1\0\15\43\1\u0122"+
    "\11\43\5\0\1\43\1\0\2\43\12\0\1\144\2\0"+
    "\1\144\2\0\1\145\1\0\1\43\6\0\4\43\1\147"+
    "\6\0\27\43\4\0\1\43\1\0\10\43\1\u0123\16\43"+
    "\5\0\1\43\1\0\2\43\12\0\1\144\2\0\1\144"+
    "\2\0\1\145\1\0\1\43\6\0\4\43\1\147\6\0"+
    "\27\43\4\0\1\43\1\0\21\43\1\u0124\5\43\5\0"+
    "\1\43\1\0\2\43\12\0\1\144\2\0\1\144\2\0"+
    "\1\145\1\0\1\43\6\0\4\43\1\147\6\0\27\43"+
    "\4\0\1\43\1\0\22\43\1\u0125\4\43\5\0\1\43"+
    "\1\0\2\43\12\0\1\144\2\0\1\144\2\0\1\145"+
    "\1\0\1\43\6\0\4\43\1\147\6\0\27\43\4\0"+
    "\1\43\1\0\21\43\1\u0126\5\43\5\0\1\43\1\0"+
    "\2\43\12\0\1\144\2\0\1\144\2\0\1\145\1\0"+
    "\1\43\6\0\4\43\1\147\6\0\27\43\4\0\1\43"+
    "\1\0\14\43\1\u0127\12\43\5\0\1\43\1\0\2\43"+
    "\12\0\1\144\2\0\1\144\2\0\1\145\1\0\1\43"+
    "\6\0\4\43\1\147\6\0\27\43\4\0\1\43\1\0"+
    "\4\43\1\u0128\22\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\17\43"+
    "\1\u0129\7\43\5\0\1\43\1\0\2\43\131\0\1\322"+
    "\25\0\2\102\1\0\6\102\1\0\16\102\1\u012a\65\102"+
    "\2\0\1\102\2\0\7\102\7\0\2\102\1\0\6\102"+
    "\1\0\20\102\1\u012b\14\102\1\103\46\102\2\0\1\102"+
    "\2\0\7\102\7\0\2\102\1\0\6\102\1\0\14\102"+
    "\1\u012c\17\102\1\103\47\102\2\0\1\102\2\0\7\102"+
    "\7\0\2\102\1\0\6\102\1\0\16\102\1\u012d\1\102"+
    "\1\u012b\6\102\1\u012e\54\102\2\0\1\102\2\0\7\102"+
    "\7\0\2\102\1\0\6\102\1\0\30\102\1\103\1\u012f"+
    "\1\332\2\102\1\u0130\1\u0131\45\102\2\0\1\102\2\0"+
    "\7\102\7\0\2\102\1\0\6\102\1\0\21\102\1\103"+
    "\13\102\1\103\46\102\2\0\1\102\2\0\7\102\7\0"+
    "\2\102\1\0\6\102\1\0\35\102\1\103\46\102\2\0"+
    "\1\102\2\0\7\102\7\0\2\102\1\0\6\102\1\0"+
    "\36\102\1\103\45\102\2\0\1\102\2\0\7\102\7\0"+
    "\2\102\1\0\6\102\1\0\21\102\1\103\62\102\2\0"+
    "\1\102\2\0\7\102\7\0\2\102\1\0\6\102\1\0"+
    "\14\102\1\u012a\22\102\1\u012b\44\102\2\0\1\102\2\0"+
    "\7\102\7\0\2\102\1\0\6\102\1\0\24\102\1\103"+
    "\5\102\1\103\3\102\1\u0132\1\u0133\2\102\1\u012c\41\102"+
    "\2\0\1\102\2\0\7\102\7\0\2\102\1\0\6\102"+
    "\1\0\13\102\35\103\34\102\2\0\1\102\1\0\1\111"+
    "\7\102\7\0\2\102\1\0\6\102\1\0\1\102\3\103"+
    "\100\102\2\0\1\102\2\0\7\102\7\0\2\102\1\0"+
    "\6\102\1\0\1\102\4\103\7\102\6\103\27\102\6\103"+
    "\25\102\2\0\1\102\2\0\7\102\7\0\2\102\1\0"+
    "\1\102\1\342\4\102\1\0\1\102\4\343\77\102\2\0"+
    "\1\102\1\247\1\0\7\102\7\0\2\102\1\0\6\102"+
    "\1\0\16\102\1\u0134\65\102\2\0\1\102\2\0\7\102"+
    "\7\0\2\102\1\0\6\102\1\0\20\102\1\u0135\14\102"+
    "\1\211\46\102\2\0\1\102\2\0\7\102\7\0\2\102"+
    "\1\0\6\102\1\0\14\102\1\u0136\17\102\1\211\47\102"+
    "\2\0\1\102\2\0\7\102\7\0\2\102\1\0\6\102"+
    "\1\0\16\102\1\u0137\1\102\1\u0135\6\102\1\u0138\54\102"+
    "\2\0\1\102\2\0\7\102\7\0\2\102\1\0\6\102"+
    "\1\0\30\102\1\211\1\u0139\1\353\2\102\1\u013a\1\u013b"+
    "\45\102\2\0\1\102\2\0\7\102\7\0\2\102\1\0"+
    "\6\102\1\0\21\102\1\211\13\102\1\211\46\102\2\0"+
    "\1\102\2\0\7\102\7\0\2\102\1\0\6\102\1\0"+
    "\35\102\1\211\46\102\2\0\1\102\2\0\7\102\7\0"+
    "\2\102\1\0\6\102\1\0\36\102\1\211\45\102\2\0"+
    "\1\102\2\0\7\102\7\0\2\102\1\0\6\102\1\0"+
    "\21\102\1\211\62\102\2\0\1\102\2\0\7\102\7\0"+
    "\2\102\1\0\6\102\1\0\14\102\1\u0134\22\102\1\u0135"+
    "\44\102\2\0\1\102\2\0\7\102\7\0\2\102\1\0"+
    "\6\102\1\0\24\102\1\211\5\102\1\u013c\3\102\1\u013d"+
    "\1\u013e\2\102\1\u0136\41\102\2\0\1\102\2\0\7\102"+
    "\7\0\2\102\1\0\6\102\1\0\13\102\35\211\34\102"+
    "\2\0\1\102\1\0\1\122\7\102\7\0\2\102\1\0"+
    "\6\102\1\0\1\102\3\u013f\100\102\2\0\1\102\2\0"+
    "\7\102\7\0\2\102\1\0\6\102\1\0\1\102\4\u0140"+
    "\7\102\6\u0140\27\102\6\u0140\25\102\2\0\1\102\2\0"+
    "\7\102\47\0\1\111\141\0\1\111\142\0\1\111\111\0"+
    "\1\111\156\0\1\111\153\0\1\111\123\0\1\111\137\0"+
    "\1\111\23\0\1\111\140\0\1\111\114\0\1\111\201\0"+
    "\1\u0141\143\0\1\u0142\7\0\1\u0143\123\0\1\u0144\154\0"+
    "\1\u0145\123\0\1\u0146\141\0\1\u0147\46\0\1\144\2\0"+
    "\1\144\4\0\1\115\6\0\4\115\1\147\6\0\27\115"+
    "\4\0\1\115\1\0\10\115\1\u0148\16\115\5\0\1\115"+
    "\1\0\2\115\12\0\1\144\2\0\1\144\4\0\1\115"+
    "\6\0\4\115\1\147\6\0\27\115\4\0\1\115\1\0"+
    "\5\115\1\243\21\115\5\0\1\115\1\0\2\115\12\0"+
    "\1\144\2\0\1\144\4\0\1\115\6\0\4\115\1\147"+
    "\6\0\27\115\4\0\1\115\1\0\4\115\1\243\22\115"+
    "\5\0\1\115\1\0\2\115\12\0\1\144\2\0\1\144"+
    "\4\0\1\115\6\0\4\115\1\147\6\0\27\115\4\0"+
    "\1\115\1\0\10\115\1\u0103\16\115\5\0\1\115\1\0"+
    "\2\115\12\0\1\144\2\0\1\144\4\0\1\115\6\0"+
    "\4\115\1\147\6\0\27\115\4\0\1\115\1\0\15\115"+
    "\1\u0149\11\115\5\0\1\115\1\0\2\115\10\0\4\243"+
    "\1\u014a\57\243\1\u0107\54\243\2\0\1\144\2\0\1\144"+
    "\4\0\1\115\6\0\4\115\1\147\6\0\27\115\4\0"+
    "\1\115\1\0\12\115\1\u014b\14\115\5\0\1\115\1\0"+
    "\2\115\12\0\1\144\2\0\1\144\4\0\1\115\6\0"+
    "\4\115\1\147\6\0\27\115\4\0\1\115\1\0\4\115"+
    "\1\u0103\22\115\5\0\1\115\1\0\2\115\56\0\1\122"+
    "\141\0\1\122\142\0\1\122\111\0\1\122\156\0\1\122"+
    "\153\0\1\122\123\0\1\122\137\0\1\122\23\0\1\122"+
    "\71\0\1\246\30\0\1\122\156\0\1\122\114\0\1\122"+
    "\115\0\1\246\6\0\3\u0115\127\0\1\246\6\0\4\u0116"+
    "\7\0\6\u0116\27\0\6\u0116\42\0\1\266\2\u0117\1\0"+
    "\1\u0118\1\u0117\133\266\1\0\2\u0118\1\0\2\u0118\133\0"+
    "\3\u0119\2\u014c\134\u0119\101\0\1\u014d\41\0\1\144\2\0"+
    "\1\144\2\0\1\145\1\0\1\43\6\0\4\43\1\147"+
    "\6\0\27\43\4\0\1\43\1\0\20\43\1\u014e\6\43"+
    "\5\0\1\43\1\0\2\43\12\0\1\144\2\0\1\144"+
    "\2\0\1\145\1\0\1\43\6\0\4\43\1\147\6\0"+
    "\27\43\4\0\1\43\1\0\22\43\1\u014f\4\43\5\0"+
    "\1\43\1\0\2\43\12\0\1\144\2\0\1\144\2\0"+
    "\1\145\1\0\1\43\6\0\4\43\1\147\6\0\27\43"+
    "\4\0\1\43\1\0\23\43\1\u0150\3\43\5\0\1\43"+
    "\1\0\2\43\12\0\1\144\2\0\1\144\2\0\1\145"+
    "\1\0\1\43\6\0\4\43\1\147\6\0\27\43\4\0"+
    "\1\43\1\0\10\43\1\u0151\16\43\5\0\1\43\1\0"+
    "\2\43\12\0\1\144\2\0\1\144\2\0\1\145\1\0"+
    "\1\43\6\0\4\43\1\147\6\0\27\43\4\0\1\43"+
    "\1\0\17\43\1\u0152\7\43\5\0\1\43\1\0\2\43"+
    "\12\0\1\144\2\0\1\144\2\0\1\145\1\0\1\43"+
    "\6\0\4\43\1\147\6\0\27\43\4\0\1\43\1\0"+
    "\25\43\1\u0153\1\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\1\u0154"+
    "\26\43\5\0\1\43\1\0\2\43\12\0\1\144\2\0"+
    "\1\144\2\0\1\145\1\0\1\43\6\0\4\43\1\147"+
    "\6\0\27\43\4\0\1\43\1\0\12\43\1\u0155\14\43"+
    "\5\0\1\43\1\0\2\43\12\0\1\144\2\0\1\144"+
    "\2\0\1\145\1\0\1\43\6\0\4\43\1\147\6\0"+
    "\27\43\4\0\1\43\1\0\26\43\1\u0156\5\0\1\43"+
    "\1\0\2\43\12\0\1\144\2\0\1\u0157\2\0\1\145"+
    "\1\0\1\43\6\0\4\43\1\147\6\0\27\43\4\0"+
    "\1\43\1\0\27\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\4\43"+
    "\1\u0158\22\43\5\0\1\43\1\0\2\43\16\0\2\102"+
    "\1\0\6\102\1\0\26\102\1\103\55\102\2\0\1\102"+
    "\2\0\7\102\7\0\2\102\1\0\6\102\1\0\27\102"+
    "\1\103\54\102\2\0\1\102\2\0\7\102\7\0\2\102"+
    "\1\0\6\102\1\0\31\102\1\103\52\102\2\0\1\102"+
    "\2\0\7\102\7\0\2\102\1\0\6\102\1\0\2\102"+
    "\1\103\101\102\2\0\1\102\2\0\7\102\7\0\2\102"+
    "\1\0\6\102\1\0\20\102\1\103\63\102\2\0\1\102"+
    "\2\0\7\102\7\0\2\102\1\0\6\102\1\0\33\102"+
    "\1\103\50\102\2\0\1\102\2\0\7\102\7\0\2\102"+
    "\1\0\6\102\1\0\16\102\1\103\65\102\2\0\1\102"+
    "\2\0\7\102\7\0\2\102\1\0\6\102\1\0\15\102"+
    "\1\103\23\102\1\103\42\102\2\0\1\102\2\0\7\102"+
    "\7\0\2\102\1\0\6\102\1\0\41\102\1\103\42\102"+
    "\2\0\1\102\2\0\7\102\7\0\2\102\1\0\6\102"+
    "\1\0\15\102\1\103\66\102\2\0\1\102\2\0\7\102"+
    "\7\0\2\102\1\0\6\102\1\0\26\102\1\211\55\102"+
    "\2\0\1\102\2\0\7\102\7\0\2\102\1\0\6\102"+
    "\1\0\27\102\1\211\54\102\2\0\1\102\2\0\7\102"+
    "\7\0\2\102\1\0\6\102\1\0\31\102\1\211\52\102"+
    "\2\0\1\102\2\0\7\102\7\0\2\102\1\0\6\102"+
    "\1\0\2\102\1\211\101\102\2\0\1\102\2\0\7\102"+
    "\7\0\2\102\1\0\6\102\1\0\20\102\1\211\63\102"+
    "\2\0\1\102\2\0\7\102\7\0\2\102\1\0\6\102"+
    "\1\0\33\102\1\211\50\102\2\0\1\102\2\0\7\102"+
    "\7\0\2\102\1\0\6\102\1\0\16\102\1\211\65\102"+
    "\2\0\1\102\2\0\7\102\7\0\2\102\1\0\6\102"+
    "\1\0\15\102\1\211\23\102\1\211\42\102\2\0\1\102"+
    "\2\0\7\102\7\0\2\102\1\0\1\102\1\342\4\102"+
    "\1\0\23\102\1\211\60\102\2\0\1\102\2\0\7\102"+
    "\7\0\2\102\1\0\6\102\1\0\41\102\1\211\42\102"+
    "\2\0\1\102\2\0\7\102\7\0\2\102\1\0\6\102"+
    "\1\0\15\102\1\211\66\102\2\0\1\102\2\0\7\102"+
    "\7\0\2\102\1\0\1\102\1\342\4\102\1\0\1\102"+
    "\3\u013f\100\102\2\0\1\102\2\0\7\102\7\0\2\102"+
    "\1\0\1\102\1\342\4\102\1\0\1\102\4\u0140\7\102"+
    "\6\u0140\27\102\6\u0140\25\102\2\0\1\102\2\0\7\102"+
    "\102\0\1\u0159\135\0\1\243\137\0\1\243\144\0\1\u0142"+
    "\145\0\1\u015a\135\0\1\u015b\132\0\1\u0142\45\0\1\144"+
    "\2\0\1\144\4\0\1\115\6\0\4\115\1\147\6\0"+
    "\27\115\4\0\1\115\1\0\14\115\1\u0104\12\115\5\0"+
    "\1\115\1\0\2\115\12\0\1\144\2\0\1\144\4\0"+
    "\1\115\6\0\4\115\1\147\6\0\27\115\4\0\1\115"+
    "\1\0\17\115\1\243\7\115\5\0\1\115\1\0\2\115"+
    "\10\0\4\243\1\0\57\243\1\u0107\54\243\2\0\1\144"+
    "\2\0\1\144\4\0\1\115\6\0\4\115\1\147\6\0"+
    "\27\115\4\0\1\115\1\0\22\115\1\u015c\4\115\5\0"+
    "\1\115\1\0\2\115\11\0\2\u015d\2\u014c\1\u015d\11\0"+
    "\1\u015e\44\0\1\u015f\161\0\1\u0160\35\0\1\144\2\0"+
    "\1\144\2\0\1\145\1\0\1\43\6\0\4\43\1\147"+
    "\6\0\27\43\4\0\1\43\1\0\12\43\1\u0161\14\43"+
    "\5\0\1\43\1\0\2\43\12\0\1\144\2\0\1\144"+
    "\2\0\1\145\1\0\1\43\6\0\4\43\1\147\6\0"+
    "\27\43\4\0\1\43\1\0\10\43\1\u0162\16\43\5\0"+
    "\1\43\1\0\2\43\12\0\1\144\2\0\1\144\2\0"+
    "\1\145\1\0\1\43\6\0\4\43\1\147\6\0\27\43"+
    "\4\0\1\43\1\0\6\43\1\u0163\20\43\5\0\1\43"+
    "\1\0\2\43\12\0\1\144\2\0\1\144\2\0\1\145"+
    "\1\0\1\43\6\0\4\43\1\147\6\0\27\43\4\0"+
    "\1\43\1\0\21\43\1\u0164\5\43\5\0\1\43\1\0"+
    "\2\43\12\0\1\144\2\0\1\144\2\0\1\145\1\0"+
    "\1\43\6\0\4\43\1\147\6\0\27\43\4\0\1\43"+
    "\1\0\12\43\1\u0165\4\43\1\u0166\7\43\5\0\1\43"+
    "\1\0\2\43\12\0\1\144\2\0\1\144\2\0\1\145"+
    "\1\0\1\43\6\0\4\43\1\147\6\0\27\43\4\0"+
    "\1\43\1\0\14\43\1\u0167\12\43\5\0\1\43\1\0"+
    "\2\43\12\0\1\144\2\0\1\144\2\0\1\145\1\0"+
    "\1\43\6\0\4\43\1\147\6\0\27\43\4\0\1\43"+
    "\1\0\4\43\1\u0168\22\43\5\0\1\43\1\0\2\43"+
    "\12\0\1\144\2\0\1\144\2\0\1\145\1\0\1\43"+
    "\6\0\4\43\1\147\6\0\27\43\4\0\1\43\1\0"+
    "\16\43\1\u0169\10\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\17\0\1\147\50\0\1\u016a\2\0"+
    "\1\u016b\144\0\1\u0143\143\0\1\243\143\0\1\u016c\27\0"+
    "\1\144\2\0\1\144\4\0\1\115\6\0\4\115\1\147"+
    "\6\0\27\115\4\0\1\115\1\0\3\115\1\u016d\23\115"+
    "\5\0\1\115\1\0\2\115\11\0\2\u015d\1\0\2\u015d"+
    "\11\0\1\u015e\44\0\1\u015f\73\0\1\u016e\213\0\1\u016f"+
    "\166\0\1\u0170\22\0\1\144\2\0\1\144\2\0\1\145"+
    "\1\0\1\43\6\0\4\43\1\147\6\0\27\43\4\0"+
    "\1\43\1\0\21\43\1\u0171\5\43\5\0\1\43\1\0"+
    "\2\43\12\0\1\144\2\0\1\144\2\0\1\145\1\0"+
    "\1\43\6\0\4\43\1\147\6\0\27\43\4\0\1\43"+
    "\1\0\14\43\1\u0172\12\43\5\0\1\43\1\0\2\43"+
    "\12\0\1\144\2\0\1\144\2\0\1\145\1\0\1\43"+
    "\6\0\4\43\1\147\6\0\27\43\4\0\1\43\1\0"+
    "\14\43\1\u0173\12\43\5\0\1\43\1\0\2\43\12\0"+
    "\1\144\2\0\1\144\2\0\1\145\1\0\1\43\6\0"+
    "\4\43\1\147\6\0\27\43\4\0\1\43\1\0\2\43"+
    "\1\u0174\24\43\5\0\1\43\1\0\2\43\12\0\1\144"+
    "\2\0\1\144\2\0\1\145\1\0\1\43\6\0\4\43"+
    "\1\147\6\0\27\43\4\0\1\43\1\0\4\43\1\u0175"+
    "\22\43\5\0\1\43\1\0\2\43\101\0\1\u0176\154\0"+
    "\1\u0177\127\0\1\u0178\46\0\1\144\2\0\1\144\4\0"+
    "\1\115\6\0\4\115\1\147\6\0\27\115\4\0\1\115"+
    "\1\0\4\115\1\u0179\22\115\5\0\1\115\1\0\2\115"+
    "\10\0\1\u0119\2\u017a\1\u014c\1\u017b\1\u017a\1\0\1\u0119"+
    "\2\0\3\u0119\1\0\2\u0119\1\0\6\u0119\5\0\105\u0119"+
    "\75\0\1\u017c\136\0\1\u017d\47\0\1\144\2\0\1\144"+
    "\2\0\1\145\1\0\1\43\6\0\4\43\1\147\6\0"+
    "\27\43\4\0\1\43\1\0\6\43\1\u017e\20\43\5\0"+
    "\1\43\1\0\2\43\12\0\1\144\2\0\1\u017f\2\0"+
    "\1\145\1\0\1\43\6\0\4\43\1\147\6\0\27\43"+
    "\4\0\1\43\1\0\27\43\5\0\1\43\1\0\2\43"+
    "\12\0\1\144\2\0\1\144\2\0\1\145\1\0\1\43"+
    "\6\0\4\43\1\147\6\0\27\43\4\0\1\43\1\0"+
    "\4\43\1\u0180\22\43\5\0\1\43\1\0\2\43\114\0"+
    "\1\u0181\145\0\1\u0182\124\0\1\u0179\43\0\1\243\2\u0179"+
    "\1\0\1\u0183\1\u0179\1\243\1\u0184\54\243\1\u0107\54\243"+
    "\1\u0119\2\u017a\1\u014c\1\u017b\1\u017a\133\u0119\1\0\2\u017b"+
    "\1\u014c\2\u017b\11\0\1\u015e\44\0\1\u015f\153\0\1\u0185"+
    "\147\0\1\u0186\34\0\1\144\2\0\1\144\17\0\1\147"+
    "\47\0\1\u0187\3\0\1\u0188\140\0\1\u0189\151\0\1\u018a"+
    "\27\0\2\u0183\1\0\2\u0183\1\0\1\u018b\131\0\3\243"+
    "\2\0\13\243\5\u018c\7\243\27\u018c\1\243\1\u0107\2\243"+
    "\1\u018c\1\243\27\u018c\5\243\1\u018c\1\243\2\u018c\5\243"+
    "\1\u018c\2\243\101\0\1\u018d\133\0\1\u018e\162\0\1\u018f"+
    "\126\0\1\u0190\137\0\1\u0191\126\0\1\u0192\67\0\5\u0193"+
    "\7\0\27\u0193\4\0\1\u0193\1\0\27\u0193\5\0\1\u0193"+
    "\1\0\2\u0193\5\0\1\u0193\2\0\3\243\2\0\2\243"+
    "\1\u0194\10\243\5\u018c\7\243\27\u018c\1\243\1\u0107\2\243"+
    "\1\u018c\1\243\27\u018c\5\243\1\u018c\1\243\2\u018c\5\243"+
    "\1\u018c\2\243\105\0\1\u0195\130\0\1\u0196\152\0\1\u0197"+
    "\140\0\1\u0198\150\0\1\u0199\126\0\1\u019a\42\0\1\u019b"+
    "\10\0\5\u0193\7\0\27\u0193\4\0\1\u0193\1\0\27\u0193"+
    "\5\0\1\u0193\1\0\2\u0193\5\0\1\u0193\122\0\1\u019c"+
    "\142\0\1\u019d\124\0\1\u019e\140\0\1\u019f\125\0\1\u01a0"+
    "\140\0\1\u01a1\155\0\1\u01a2\140\0\1\u01a3\125\0\1\u01a4"+
    "\151\0\1\u01a5\144\0\1\u01a6\140\0\1\u01a7\122\0\1\u01a8"+
    "\141\0\1\u01a9\165\0\1\u01aa\21\0\2\u014c\134\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[34338];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\6\1\2\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\7\1\1\11\1\1\1\11"+
    "\16\1\1\11\5\1\1\11\1\1\1\11\6\1\1\11"+
    "\6\1\1\11\2\0\1\11\2\0\5\1\1\0\1\1"+
    "\3\0\1\1\3\0\2\1\1\11\3\0\1\1\3\0"+
    "\2\1\1\0\23\1\1\0\4\11\3\0\1\1\1\0"+
    "\1\11\2\1\1\0\3\1\23\0\7\1\1\11\17\0"+
    "\3\1\1\0\3\1\1\0\1\1\1\11\20\1\1\0"+
    "\2\11\16\1\1\11\20\1\20\0\10\1\15\0\3\1"+
    "\1\0\46\1\7\0\4\1\2\0\11\1\1\0\1\1"+
    "\3\0\1\1\4\0\11\1\3\0\2\1\2\0\5\1"+
    "\3\0\3\1\2\0\1\1\1\0\1\1\3\0\1\1"+
    "\7\0\1\1\7\0\1\1\4\0\1\11\1\0\1\11"+
    "\1\0\1\11\6\0\1\11\1\0\2\11\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private int commentStart;
    private int commentDepth;

    private int optionsGhcStart;
    private int optionsGhcDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case NCOMMENT: {
              yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return HS_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 427: break;
            case NHADDOCK: {
              yybegin(YYINITIAL);
        zzStartRead = haddockStart;
        return HS_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 428: break;
            case QQ: {
              yybegin(YYINITIAL);
        zzStartRead = qqStart;
        return HS_NOT_TERMINATED_QQ_EXPRESSION;
            }  // fall though
            case 429: break;
            case OPTIONS_GHC: {
              yybegin(YYINITIAL);
        return com.intellij.psi.TokenType.BAD_CHARACTER;
            }  // fall though
            case 430: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 84: break;
          case 2:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 85: break;
          case 3:
            { return HS_NEWLINE;
            }
          // fall through
          case 86: break;
          case 4:
            { return HS_VARSYM_ID;
            }
          // fall through
          case 87: break;
          case 5:
            { return HS_DOUBLE_QUOTES;
            }
          // fall through
          case 88: break;
          case 6:
            { return HS_QUOTE;
            }
          // fall through
          case 89: break;
          case 7:
            { return HS_LEFT_PAREN;
            }
          // fall through
          case 90: break;
          case 8:
            { return HS_RIGHT_PAREN;
            }
          // fall through
          case 91: break;
          case 9:
            { return HS_COMMA;
            }
          // fall through
          case 92: break;
          case 10:
            { return HS_DOT;
            }
          // fall through
          case 93: break;
          case 11:
            { return HS_DECIMAL;
            }
          // fall through
          case 94: break;
          case 12:
            { return HS_CONSYM_ID;
            }
          // fall through
          case 95: break;
          case 13:
            { return HS_SEMICOLON;
            }
          // fall through
          case 96: break;
          case 14:
            { return HS_EQUAL;
            }
          // fall through
          case 97: break;
          case 15:
            { return HS_AT;
            }
          // fall through
          case 98: break;
          case 16:
            { return HS_CON_ID;
            }
          // fall through
          case 99: break;
          case 17:
            { return HS_LEFT_BRACKET;
            }
          // fall through
          case 100: break;
          case 18:
            { return HS_BACKSLASH;
            }
          // fall through
          case 101: break;
          case 19:
            { return HS_RIGHT_BRACKET;
            }
          // fall through
          case 102: break;
          case 20:
            { return HS_UNDERSCORE;
            }
          // fall through
          case 103: break;
          case 21:
            { return HS_BACKQUOTE;
            }
          // fall through
          case 104: break;
          case 22:
            { return HS_VAR_ID;
            }
          // fall through
          case 105: break;
          case 23:
            { return HS_LEFT_BRACE;
            }
          // fall through
          case 106: break;
          case 24:
            { return HS_VERTICAL_BAR;
            }
          // fall through
          case 107: break;
          case 25:
            { return HS_RIGHT_BRACE;
            }
          // fall through
          case 108: break;
          case 26:
            { return HS_TILDE;
            }
          // fall through
          case 109: break;
          case 27:
            { return HS_LEFT_ARROW;
            }
          // fall through
          case 110: break;
          case 28:
            { return HS_RIGHT_ARROW;
            }
          // fall through
          case 111: break;
          case 29:
            { return HS_DOUBLE_RIGHT_ARROW;
            }
          // fall through
          case 112: break;
          case 30:
            { return HS_FORALL;
            }
          // fall through
          case 113: break;
          case 31:
            { return HS_COLON_COLON;
            }
          // fall through
          case 114: break;
          case 32:
            { 
            }
          // fall through
          case 115: break;
          case 33:
            { qqDepth++;
            }
          // fall through
          case 116: break;
          case 34:
            { if (qqDepth > 0) {
                qqDepth--;
            }
            else {
                 yybegin(YYINITIAL);
                 zzStartRead = qqStart;
                 return HS_LIST_COMPREHENSION;
            }
            }
          // fall through
          case 117: break;
          case 35:
            { return HS_ONE_PRAGMA;
            }
          // fall through
          case 118: break;
          case 36:
            { return HS_HASH;
            }
          // fall through
          case 119: break;
          case 37:
            { return HS_PRAGMA_SEP;
            }
          // fall through
          case 120: break;
          case 38:
            { return HS_DASH;
            }
          // fall through
          case 121: break;
          case 39:
            { return HS_STRING_LITERAL;
            }
          // fall through
          case 122: break;
          case 40:
            { return HS_COMMENT;
            }
          // fall through
          case 123: break;
          case 41:
            { yybegin(QQ);
    qqDepth = 0;
    qqStart = getTokenStart();
            }
          // fall through
          case 124: break;
          case 42:
            { return HS_DO;
            }
          // fall through
          case 125: break;
          case 43:
            { return HS_IF;
            }
          // fall through
          case 126: break;
          case 44:
            { return HS_IN;
            }
          // fall through
          case 127: break;
          case 45:
            { return HS_OF;
            }
          // fall through
          case 128: break;
          case 46:
            { yybegin(NCOMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          // fall through
          case 129: break;
          case 47:
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return HS_NCOMMENT;
        }
            }
          // fall through
          case 130: break;
          case 48:
            { commentDepth++;
            }
          // fall through
          case 131: break;
          case 49:
            { if (haddockDepth > 0) {
            haddockDepth--;
        }
        else {
             yybegin(YYINITIAL);
             zzStartRead = haddockStart;
             return HS_NHADDOCK;
        }
            }
          // fall through
          case 132: break;
          case 50:
            { haddockDepth++;
            }
          // fall through
          case 133: break;
          case 51:
            { if (qqDepth > 0) {
            qqDepth--;
        }
        else {
             yybegin(YYINITIAL);
             zzStartRead = qqStart;
             return HS_QUASIQUOTE;
        }
            }
          // fall through
          case 134: break;
          case 52:
            { return HS_FLOAT;
            }
          // fall through
          case 135: break;
          case 53:
            { return HS_DIRECTIVE;
            }
          // fall through
          case 136: break;
          case 54:
            { return HS_CHARACTER_LITERAL;
            }
          // fall through
          case 137: break;
          case 55:
            { return HS_OCTAL;
            }
          // fall through
          case 138: break;
          case 56:
            { return HS_HEXADECIMAL;
            }
          // fall through
          case 139: break;
          case 57:
            { return FUNCTION_DECLARATION;
            }
          // fall through
          case 140: break;
          case 58:
            { return HS_LET;
            }
          // fall through
          case 141: break;
          case 59:
            { yybegin(OPTIONS_GHC);
    return HS_PRAGMA_START;
            }
          // fall through
          case 142: break;
          case 60:
            { yybegin(NHADDOCK);
    haddockDepth = 0;
    haddockStart = getTokenStart();
            }
          // fall through
          case 143: break;
          case 61:
            { yybegin(YYINITIAL);
        return HS_PRAGMA_END;
            }
          // fall through
          case 144: break;
          case 62:
            { return HS_HADDOCK;
            }
          // fall through
          case 145: break;
          case 63:
            { return HS_CASE;
            }
          // fall through
          case 146: break;
          case 64:
            { return HS_DATA;
            }
          // fall through
          case 147: break;
          case 65:
            { return HS_ELSE;
            }
          // fall through
          case 148: break;
          case 66:
            { return HS_THEN;
            }
          // fall through
          case 149: break;
          case 67:
            { return HS_TYPE;
            }
          // fall through
          case 150: break;
          case 68:
            { return HS_CLASS;
            }
          // fall through
          case 151: break;
          case 69:
            { return HS_INFIX;
            }
          // fall through
          case 152: break;
          case 70:
            { return HS_WHERE;
            }
          // fall through
          case 153: break;
          case 71:
            { return HS_IMPORT;
            }
          // fall through
          case 154: break;
          case 72:
            { return HS_INFIXL;
            }
          // fall through
          case 155: break;
          case 73:
            { return HS_INFIXR;
            }
          // fall through
          case 156: break;
          case 74:
            { return HS_MODULE;
            }
          // fall through
          case 157: break;
          case 75:
            { return HS_DEFAULT;
            }
          // fall through
          case 158: break;
          case 76:
            { return HS_NEWTYPE;
            }
          // fall through
          case 159: break;
          case 77:
            { return HS_DERIVING;
            }
          // fall through
          case 160: break;
          case 78:
            { return HS_INSTANCE;
            }
          // fall through
          case 161: break;
          case 79:
            { return HS_INCLUDE_DIRECTIVE;
            }
          // fall through
          case 162: break;
          case 80:
            { return HS_TYPE_FAMILY;
            }
          // fall through
          case 163: break;
          case 81:
            { return HS_TYPE_INSTANCE;
            }
          // fall through
          case 164: break;
          case 82:
            { return HS_FOREIGN_EXPORT;
            }
          // fall through
          case 165: break;
          case 83:
            { return HS_FOREIGN_IMPORT;
            }
          // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
